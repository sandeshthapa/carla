// Copyright (c) 2020 Computer Vision Center (CVC) at the Universitat Autonoma
// de Barcelona (UAB).
//
// This work is licensed under the terms of the MIT license.
// For a copy, see <https://opensource.org/licenses/MIT>.

#pragma once

#include "carla/rpc/Location.h"

#include <cstdint>
#include <vector>

namespace carla {
namespace sensor {
namespace s11n {

  /// Helper class to store and serialize the data generated by a RawLidar.
  ///
  /// The header of a Lidar measurement consists of an array of uint32_t's in
  /// the following layout
  ///
  ///    {
  ///      Horizontal angle (float),
  ///      Channel count,
  ///      Point count of channel 0,
  ///      ...
  ///      Point count of channel n,
  ///    }
  ///
  /// The points are stored in an array of detections, each detection consist in
  /// four floats, the point detected and the angle between the casted ray and
  /// the normal of the hitted object, and two unsigned integers, the index
  /// and the semantic tag of the hitted object
  ///
  ///    {
  ///      X0, Y0, Z0, Cos(TH0), idx_0, tag_0
  ///      ...
  ///      Xn, Yn, Zn, Cos(THn), idx_n, tag_n
  ///    }
  ///

  #pragma pack(push, 1)
  class LidarRawDetection {
    public:
      geom::Location point{};
      float cos_inc_angle{};
      uint32_t object_idx{};
      uint32_t object_tag{};

      LidarRawDetection() = default;

      LidarRawDetection(float x, float y, float z, float cosTh, uint32_t idx, uint32_t tag) :
          point(x, y, z), cos_inc_angle{cosTh}, object_idx{idx}, object_tag{tag} { }
      LidarRawDetection(geom::Location p, float cosTh, uint32_t idx, uint32_t tag) :
          point(p), cos_inc_angle{cosTh}, object_idx{idx}, object_tag{tag} { }

      void WritePlyHeaderInfo(std::ostream& out) const{
        out << "property float32 x\n" \
           "property float32 y\n" \
           "property float32 z\n" \
           "property float32 CosAngle\n" \
           "property uint32 ObjIdx\n" \
           "property uint32 ObjTag";
      }

      void WriteDetection(std::ostream& out) const{
        out << point.x << ' ' << point.y << ' ' << point.z << ' ' \
          << cos_inc_angle << ' ' << object_idx << ' ' << object_tag;
      }
  };
  #pragma pack(pop)

  class LidarRawData {
    static_assert(sizeof(float) == sizeof(uint32_t), "Invalid float size");

    friend class LidarRawSerializer;
    friend class LidarRawHeaderView;

    static const int SizeLidarRawDetection = 6;

    enum Index : size_t {
      HorizontalAngle,
      ChannelCount,
      SIZE
    };

  public:
    explicit LidarRawData(uint32_t ChannelCount = 0u)
      : _header(Index::SIZE + ChannelCount, 0u) {
      _header[Index::ChannelCount] = ChannelCount;
    }

    LidarRawData &operator=(LidarRawData &&) = default;

    float GetHorizontalAngle() const {
      return reinterpret_cast<const float &>(_header[Index::HorizontalAngle]);
    }

    void SetHorizontalAngle(float angle) {
      std::memcpy(&_header[Index::HorizontalAngle], &angle, sizeof(uint32_t));
    }

    uint32_t GetChannelCount() const {
      return _header[Index::ChannelCount];
    }

    void Reset(uint32_t channels, uint32_t channel_point_count) {
      std::memset(_header.data() + Index::SIZE, 0, sizeof(uint32_t) * GetChannelCount());
      _ser_points.clear();
      _ser_points.reserve(channels * channel_point_count);

      _aux_points.resize(channels);

      for (auto& aux : _aux_points) {
        aux.clear();
        aux.reserve(channel_point_count);
      }
    }

    void WritePointAsync(uint32_t channel, LidarRawDetection &detection) {
      DEBUG_ASSERT(GetChannelCount() > channel);
      _aux_points[channel].emplace_back(detection);
    }

    void SaveDetections() {
      _ser_points.clear();

      for (auto idxChannel = 0u; idxChannel < GetChannelCount(); ++idxChannel) {
        _header[Index::SIZE + idxChannel] = static_cast<uint32_t>(_aux_points.size());
        _ser_points.insert(_ser_points.end(), _aux_points[idxChannel].begin(), _aux_points[idxChannel].end());
      }
    }

  private:
    std::vector<uint32_t> _header;
    std::vector<std::vector<LidarRawDetection>> _aux_points;
    std::vector<LidarRawDetection> _ser_points;
  };

} // namespace s11n
} // namespace sensor
} // namespace carla
